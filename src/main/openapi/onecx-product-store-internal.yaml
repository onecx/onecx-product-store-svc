---
openapi: 3.0.3
info:
  title: onecx-product-store internal service
  version: 1.0.0
servers:
  - url: "http://onecx-product-store:8080"
tags:
  - name: microfrontendsInternal
  - name: productsInternal
  - name: microservicesInternal
  - name: slotsInternal
paths:
  /internal/microfrontends:
    post:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:write ]
      tags:
        - microfrontendsInternal
      description: Create micro-frontend
      operationId: createMicrofrontend
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMicrofrontendRequest'
      responses:
        "201":
          description: New micro-frontend created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microfrontend'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/microfrontends/search:
    post:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:read ]
      tags:
        - microfrontendsInternal
      description: Search for micro-frontend by search criteria
      operationId: searchMicrofrontends
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MicrofrontendSearchCriteria'
      responses:
        "200":
          description: Corresponding micro-frontends
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MicrofrontendPageResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/microfrontends/{id}:
    get:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:read ]
      tags:
        - microfrontendsInternal
      description: Return micro-frontend by ID
      operationId: getMicrofrontend
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microfrontend'
        "404":
          description: Not found
    put:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:write ]
      tags:
        - microfrontendsInternal
      description: Update microfrontend by ID
      operationId: updateMicrofrontend
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMicrofrontendRequest'
      responses:
        "204":
          description: Microfrontend updated
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: Microfrontend not found
    delete:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:delete ]
      tags:
        - microfrontendsInternal
      description: Delete microfrontend by ID
      operationId: deleteMicrofrontend
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/slots:
    post:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:write ]
      tags:
        - slotsInternal
      description: Create slot
      operationId: createSlot
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSlotRequest'
      responses:
        "201":
          description: New slot created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/slots/search:
    post:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:read ]
      tags:
        - slotsInternal
      description: Search for slots by search criteria
      operationId: searchSlots
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SlotSearchCriteria'
      responses:
        "200":
          description: Corresponding slots
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SlotPageResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/slots/{id}:
    get:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:read ]
      tags:
        - slotsInternal
      description: Return slot by ID
      operationId: getSlot
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Slot'
        "404":
          description: Not found
    put:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:write ]
      tags:
        - slotsInternal
      description: Update slot by ID
      operationId: updateSlot
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSlotRequest'
      responses:
        "204":
          description: Slot updated
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: Slot not found
    delete:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:delete ]
      tags:
        - slotsInternal
      description: Delete slot by ID
      operationId: deleteSlot
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/microservices:
    post:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:write ]
      tags:
        - microservicesInternal
      description: Create microservice
      operationId: createMicroservice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMicroserviceRequest'
      responses:
        "201":
          description: New microservice created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microservice'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/microservices/search:
    post:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:read ]
      tags:
        - microservicesInternal
      description: Search for microservices by search criteria
      operationId: searchMicroservice
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MicroserviceSearchCriteria'
      responses:
        "200":
          description: Corresponding micro-services
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MicroservicePageResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/microservices/{id}:
    get:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:read ]
      tags:
        - microservicesInternal
      description: Return microservices by ID
      operationId: getMicroservice
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Microservice'
        "404":
          description: Not found
    put:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:write ]
      tags:
        - microservicesInternal
      description: Update microservice by ID
      operationId: updateMicroservice
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateMicroserviceRequest'
      responses:
        "204":
          description: microservice updated
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: microservice not found
    delete:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:delete ]
      tags:
        - microservicesInternal
      description: Delete microservice by ID
      operationId: deleteMicroservice
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/products:
    post:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:write ]
      tags:
        - productsInternal
      description: Create new product
      operationId: createProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        "201":
          description: New product created
          headers:
            Location:
              required: true
              schema:
                type: string
                format: url
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/products/search:
    post:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:read ]
      tags:
        - productsInternal
      description: Search for products by search criteria
      operationId: searchProducts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductSearchCriteria'
      responses:
        "200":
          description: Corresponding products
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductPageResult'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/products/load:
    post:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:read ]
      tags:
        - productsInternal
      description: load products by criteria
      operationId: loadProductsByCriteria
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductLoadSearchCriteria'
      responses:
        "200":
          description: Page result matching given criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsLoadResult'
        "404":
          description: Product not found
  /internal/products/criteria:
    get:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:read ]
      tags:
        - productsInternal
      description: return products search criteria
      operationId: getProductSearchCriteria
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductCriteria'
        "400":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/products/{id}:
    get:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:read ]
      tags:
        - productsInternal
      description: Return product by ID
      operationId: getProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: Not found
    put:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:write ]
      tags:
        - productsInternal
      description: Update product by ID
      operationId: updateProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        "200":
          description: Product updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: Product not found
    delete:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:delete ]
      tags:
        - productsInternal
      description: Delete product by ID
      operationId: deleteProduct
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
  /internal/products/name/{name}:
    get:
      security:
        - oauth2: [ ocx-ps:all, ocx-ps:read ]
      tags:
        - productsInternal
      description: Return product by name (unique)
      operationId: getProductByName
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        "400":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProblemDetailResponse'
        "404":
          description: Not found
components:
  securitySchemes:
    oauth2:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: https://oauth.simple.api/token
          scopes:
            ocx-ps:all: Grants access to all operations
            ocx-ps:read: Grants read access
            ocx-ps:write: Grants write access
            ocx-ps:delete: Grants access to delete operations
  schemas:
    ProductsLoadResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/LoadProduct'
    LoadProduct:
      type: object
      properties:
        name:
          type: string
        displayName:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        basePath:
          type: string
        version:
          type: string
        undeployed:
          type: boolean
        microfrontends:
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendAbstract'
        microservices:
          type: array
          items:
            $ref: '#/components/schemas/MicroserviceAbstract'
        slots:
          type: array
          items:
            $ref: '#/components/schemas/SlotAbstract'
    MicrofrontendAbstract:
      type: object
      properties:
        appId:
          type: string
        appName:
          type: string
        undeployed:
          type: boolean
        version:
          type: string
        deprecated:
          type: boolean
        type:
          $ref: "#/components/schemas/MicrofrontendType"
        exposedModule:
          type: string
    MicroserviceAbstract:
      type: object
      properties:
        appId:
          type: string
        appName:
          type: string
        undeployed:
          type: boolean
    SlotAbstract:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        deprecated:
          type: boolean
          default: false
        undeployed:
          type: boolean
    ProductPageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/ProductAbstract'
    ProductAbstract:
      type: object
      properties:
        id:
          type: string
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        modificationCount:
          format: int32
          type: integer
        name:
          type: string
        operator:
          type: boolean
        version:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        basePath:
          type: string
        displayName:
          type: string
        iconName:
          type: string
        classifications:
          type: string
        undeployed:
          type: boolean
        provider:
          type: string
        applications:
          type: array
          items:
            $ref: '#/components/schemas/ApplicationAbstract'
    ApplicationAbstract:
      type: object
      properties:
        appName:
          type: string
        appId:
          type: string
        undeployed:
          type: boolean
        deprecated:
          type: boolean
    ProductCriteria:
      type: object
      properties:
        providers:
          type: array
          items:
            type: string
        classifications:
          type: array
          items:
            type: string
    ProductLoadSearchCriteria:
      type: object
      properties:
        productNames:
          type: array
          items:
            type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    ProductSearchCriteria:
      type: object
      properties:
        names:
          type: array
          items:
            type: string
        providers:
          type: array
          items:
            type: string
        classifications:
          type: array
          items:
            type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    CreateProductRequest:
      type: object
      required:
        - name
        - version
        - basePath
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        basePath:
          type: string
        displayName:
          type: string
        iconName:
          type: string
        classifications:
          type: string
        undeployed:
          type: boolean
        provider:
          type: string
    UpdateProductRequest:
      type: object
      required:
        - name
        - version
        - basePath
      properties:
        name:
          type: string
        version:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        basePath:
          type: string
        displayName:
          type: string
        iconName:
          type: string
        classifications:
          type: string
        undeployed:
          type: boolean
        provider:
          type: string
    Product:
      type: object
      required:
        - id
        - name
        - basePath
      properties:
        id:
          type: string
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        modificationCount:
          format: int32
          type: integer
        name:
          type: string
        operator:
          type: boolean
        version:
          type: string
        description:
          type: string
        imageUrl:
          type: string
        basePath:
          type: string
        displayName:
          type: string
        iconName:
          type: string
        classifications:
          type: string
        undeployed:
          type: boolean
        provider:
          type: string
    MicrofrontendPageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/MicrofrontendPageItem'
    MicroservicePageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/MicroservicePageItem'
    MicrofrontendPageItem:
      required:
        - remoteEntry
        - remoteBaseUrl
        - productName
        - appId
        - appVersion
        - appName
      type: object
      properties:
        remoteName:
          type: string
        tagName:
          type: string
        id:
          type: string
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        modificationCount:
          format: int32
          type: integer
        operator:
          type: boolean
        appId:
          type: string
        appVersion:
          type: string
        appName:
          type: string
        description:
          type: string
        iconName:
          type: string
        technology:
          type: string
        remoteBaseUrl:
          type: string
        remoteEntry:
          type: string
        productName:
          type: string
        contact:
          type: string
        note:
          type: string
        exposedModule:
          type: string
        classifications:
          type: string
        deprecated:
          type: boolean
        undeployed:
          type: boolean
        hasParameter:
          type: boolean
        type:
          $ref: "#/components/schemas/MicrofrontendType"
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/CreateUIEndpoint"
    MicroservicePageItem:
      required:
        - productName
        - appId
      type: object
      properties:
        id:
          type: string
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        modificationCount:
          format: int32
          type: integer
        appId:
          type: string
        version:
          type: string
        name:
          type: string
        description:
          type: string
        productName:
          type: string
        operator:
          type: boolean
        undeployed:
          type: boolean
    MicrofrontendSearchCriteria:
      type: object
      properties:
        appName:
          type: string
        productName:
          type: string
        type:
          $ref: '#/components/schemas/MicrofrontendType'
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    MicroserviceSearchCriteria:
      type: object
      properties:
        appName:
          type: string
        productName:
          type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    CreateMicrofrontendRequest:
      required:
        - remoteEntry
        - remoteBaseUrl
        - productName
        - appId
        - appVersion
        - appName
      type: object
      properties:
        remoteName:
          type: string
        tagName:
          type: string
        appId:
          type: string
        appVersion:
          type: string
        appName:
          type: string
        description:
          type: string
        remoteBaseUrl:
          type: string
        remoteEntry:
          type: string
        technology:
          type: string
        productName:
          type: string
        classifications:
          type: string
        contact:
          type: string
        iconName:
          type: string
        note:
          type: string
        exposedModule:
          type: string
        deprecated:
          type: boolean
        undeployed:
          type: boolean
        hasParameter:
          type: boolean
        type:
          $ref: "#/components/schemas/MicrofrontendType"
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/CreateUIEndpoint"
    UpdateSlotRequest:
      required:
        - productName
        - appId
        - name
      type: object
      properties:
        name:
          type: string
        appId:
          type: string
        description:
          type: string
        productName:
          type: string
        deprecated:
          type: boolean
        undeployed:
          type: boolean
    SlotPageResult:
      type: object
      properties:
        totalElements:
          format: int64
          description: The total elements in the resource.
          type: integer
        number:
          format: int32
          type: integer
        size:
          format: int32
          type: integer
        totalPages:
          format: int64
          type: integer
        stream:
          type: array
          items:
            $ref: '#/components/schemas/SlotPageItem'
    SlotPageItem:
      required:
        - productName
        - appId
        - name
      type: object
      properties:
        name:
          type: string
        id:
          type: string
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        modificationCount:
          format: int32
          type: integer
        operator:
          type: boolean
        appId:
          type: string
        description:
          type: string
        productName:
          type: string
        deprecated:
          type: boolean
        undeployed:
          type: boolean
    SlotSearchCriteria:
      type: object
      properties:
        appId:
          type: string
        name:
          type: string
        productName:
          type: string
        pageNumber:
          format: int32
          description: The number of page.
          default: 0
          type: integer
        pageSize:
          format: int32
          description: The size of page
          default: 100
          maximum: 1000
          type: integer
    CreateSlotRequest:
      required:
        - appId
        - productName
        - name
      type: object
      properties:
        name:
          type: string
        appId:
          type: string
        description:
          type: string
        productName:
          type: string
        deprecated:
          type: boolean
        undeployed:
          type: boolean
    Slot:
      required:
        - productName
        - appId
        - name
      type: object
      properties:
        id:
          type: string
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        modificationCount:
          format: int32
          type: integer
        operator:
          type: boolean
        appId:
          type: string
        name:
          type: string
        description:
          type: string
        productName:
          type: string
        deprecated:
          type: boolean
        undeployed:
          type: boolean
    CreateMicroserviceRequest:
      required:
        - productName
        - appId
      type: object
      properties:
        appId:
          type: string
        version:
          type: string
        name:
          type: string
        description:
          type: string
        productName:
          type: string
        type:
          type: string
        undeployed:
          type: boolean
    CreateUIEndpoint:
      required:
        - path
        - name
      type: object
      properties:
        path:
          type: string
        name:
          type: string
    UpdateMicrofrontendRequest:
      required:
        - remoteEntry
        - remoteBaseUrl
        - productName
        - appId
        - appVersion
        - appName
      type: object
      properties:
        remoteName:
          type: string
        tagName:
          type: string
        appId:
          type: string
        appVersion:
          type: string
        appName:
          type: string
        description:
          type: string
        remoteBaseUrl:
          type: string
        remoteEntry:
          type: string
        productName:
          type: string
        technology:
          type: string
        classifications:
          type: string
        contact:
          type: string
        iconName:
          type: string
        note:
          type: string
        exposedModule:
          type: string
        deprecated:
          type: boolean
        undeployed:
          type: boolean
        hasParameter:
          type: boolean
        type:
          $ref: "#/components/schemas/MicrofrontendType"
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/UpdateUIEndpoint"
    UpdateMicroserviceRequest:
      type: object
      properties:
        appId:
          type: string
        version:
          type: string
        name:
          type: string
        description:
          type: string
        productName:
          type: string
        type:
          type: string
        undeployed:
          type: boolean
    UpdateUIEndpoint:
      required:
        - path
        - name
      type: object
      properties:
        path:
          type: string
        name:
          type: string
    Microfrontend:
      required:
        - remoteEntry
        - remoteBaseUrl
        - productName
        - appId
        - appVersion
        - appName
      type: object
      properties:
        remoteName:
          type: string
        tagName:
          type: string
        id:
          type: string
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        modificationCount:
          format: int32
          type: integer
        operator:
          type: boolean
        appId:
          type: string
        appVersion:
          type: string
        appName:
          type: string
        description:
          type: string
        technology:
          type: string
        remoteBaseUrl:
          type: string
        remoteEntry:
          type: string
        productName:
          type: string
        classifications:
          type: string
        contact:
          type: string
        iconName:
          type: string
        note:
          type: string
        exposedModule:
          type: string
        deprecated:
          type: boolean
        undeployed:
          type: boolean
        hasParameter:
          type: boolean
        type:
          $ref: "#/components/schemas/MicrofrontendType"
        endpoints:
          type: array
          items:
            $ref: "#/components/schemas/UIEndpoint"
    Microservice:
      type: object
      properties:
        id:
          type: string
        creationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        creationUser:
          type: string
        modificationDate:
          $ref: '#/components/schemas/OffsetDateTime'
        modificationUser:
          type: string
        modificationCount:
          format: int32
          type: integer
        appId:
          type: string
        version:
          type: string
        name:
          type: string
        description:
          type: string
        productName:
          type: string
        operator:
          type: boolean
        undeployed:
          type: boolean
    UIEndpoint:
      required:
        - path
        - name
      type: object
      properties:
        path:
          type: string
        name:
          type: string
    OffsetDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50-04:00
    MicrofrontendType:
      type: string
      enum: [ MODULE, COMPONENT ]
    ProblemDetailResponse:
      type: object
      properties:
        errorCode:
          type: string
        detail:
          type: string
        params:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailParam'
        invalidParams:
          type: array
          items:
            $ref: '#/components/schemas/ProblemDetailInvalidParam'
    ProblemDetailParam:
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    ProblemDetailInvalidParam:
      type: object
      properties:
        name:
          type: string
        message:
          type: string